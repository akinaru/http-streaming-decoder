{
  "name": "http-streaming-decoder-cpp",
  "tagline": "HTTP streaming decoder in C++",
  "body": "# HTTP streaming decoder #\r\n\r\n[![Build Status](https://travis-ci.org/akinaru/http-streaming-decoder.svg?branch=master)](https://travis-ci.org/akinaru/http-streaming-decoder)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](LICENSE.md)\r\n\r\nhttp://akinaru.github.io/http-streaming-decoder\r\n\r\nC++ HTTP streaming decoder for Qt4/Qt5\r\n\r\n* parse HTTP data streaming\r\n* non-blocking process\r\n* compatible with non-blocking or blocking socket architecture\r\n\r\n## Usage\r\n\r\nFirst you have to declare the `httpdecoder` object\r\n\r\n```\r\nhttpdecoder decoder;\r\n```\r\n\r\nThen instantiate a new `httpconsumer` : this object will monitor your data streaming decoding and will contain decoded frame(s)\r\n\r\n```\r\nhttpconsumer *consumer = new httpconsumer;\r\n```\r\n\r\nFor both of them you'll need these import :\r\n```\r\n#include \"protocol/http/httpdecoder.h\"\r\n#include \"protocol/inter/http/httpconsumer.h\"\r\n```\r\n\r\nYour data streaming will be put to a `QByteArray *` to be sent to http decoder :\r\n```\r\nQByteArray *httpframe = new QByteArray(\"POST /rest/help/todo HTTP/1.1\\r\\nheaders1:  value1\\r\\nheaders2:  value2\\r\\nContent-Length:  15\\r\\n\\r\\nbodyTobeWritten\\r\\n\")\r\n```\r\n\r\nEventually decode with : \r\n\r\n```\r\ndecoder.httpdecode(consumer,httpFrame);\r\n```\r\n\r\n* Result of decoding will be in your pointer to consumer object you have just created\r\n\r\n* You can access to decoded frame with `consumer->getHttpFrameList()` which is a `vector<httpconsumer*>` you can iterate\r\n\r\n* Then you can remove frame you have treated and re-loop to decode again with the same object\r\n\r\n* You must delete your consumer when you are done with it (socket destroyed / destructor ...)\r\n\r\nComplete example in [httpdecoder-test/launcher.cpp](httpdecoder-test/launcher.cpp)\r\n\r\n## Example\r\n\r\n```\r\nhttpdecoder decoder;\r\n\r\nhttpconsumer *consumer = new httpconsumer;\r\n\r\nQByteArray *httpframe = \"POST /rest/help/todo HTTP/1.1\\r\\nheaders1:  value1\\r\\nheaders2:  value2\\r\\nContent-Length:  15\\r\\n\\r\\nbodyTobeWritten\\r\\nHTTP/1.1 200 OK\\r\\n\\r\\n\";\r\n\r\nhttpframe = new QByteArray(data1);\r\n\r\ndecoder.httpdecode(consumer,httpframe);\r\n```\r\n\r\nFrom consumer object `consumer->getHttpFrameList()` you can extract those fields : \r\n\r\n|  method name       | return data type                  |  description  |  example                |\r\n| -------------------| ----------------------------------|---------------|-------------------------|\r\n| `getUri()`         | `std::string`                       | http uri           |  \"/api/rest\"              |\r\n| `getMethod()`      | `std::string`                       | http method        |  \"POST\"                   |\r\n| `getBody()`        | `std::string`                       | http body          |  \"{\\\"data\\\":\\\"OK\\\"}\"          |\r\n| `getQueryString()` | `std::string`                       | http querystring   |  \"Not Found\"              |\r\n| `getStatusCode()`  | `int`                               | http status code   |  404                    |\r\n| `getHeaders()`     | `std::map<std::string,std::string>` | http headers       | (\"Content-Length\",\"15\") |\r\n\r\n## Integrate in your project\r\n\r\n* from a submodule\r\n\r\n```\r\ngit submodule add git://github.com/akinaru/http-streaming-decoder.git\r\n```\r\n\r\nand in your `project.pro` :\r\n\r\n```\r\nTEMPLATE = subdirs\r\nSUBDIRS = http-streaming-decoder your-app\r\nyour-app.depends = http-streaming-decoder\r\n```\r\n\r\nwith in `your-app.pro` :\r\n\r\n```\r\nTARGET = your-app\r\nSOURCES = main.cpp\r\nINCLUDEPATH += ../http-streaming-decoder/httpdecoder/release\r\nLIBS += -L../http-streaming-decoder/httpdecoder/release -lhttpdecoder\r\n```\r\n\r\n## Build library\r\n\r\n```\r\nqmake\r\nmake\r\n```\r\n\r\n## Projects using this library\r\n\r\n* https://github.com/akinaru/websocket-non-blocking\r\n\r\n## Compatibility\r\n\r\n* Qt4\r\n* Qt5\r\n\r\n## Specification\r\n\r\n* https://www.ietf.org/rfc/rfc2616.txt",
  "google": "UA-62569105-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}