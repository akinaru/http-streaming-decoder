{"name":"http-streaming-decoder-cpp","tagline":"HTTP streaming decoder in C++","body":"# HTTP streaming decoder in C++ #\r\n\r\nhttp://akinaru.github.io/http-streaming-decoder-cpp/\r\n\r\n<i>Last update 10/05/2015</i>\r\n\r\nHTTP protocol decoder\r\n\r\n* parse any HTTP data streaming\r\n* non-blocking process\r\n* compatible with non-blocking or blocking socket architecture\r\n* http decoding monitoring\r\n\r\n<hr/>\r\n\r\n<b>Generality</b>\r\n\r\nThis repo features source code and test project for http decoder library.\r\n\r\nLibrary is generated as a shared library (.dll or .so)\r\n\r\nThis project uses QtCore and is build with qmake utility (you can use QtCreator to build it)\r\n\r\n<hr/>\r\n\r\n<b>PROGRAM SYNTAX for decoding HTTP frames</b>\r\n\r\nFirst you have to declare the ``HttpDecoder`` object\r\n\r\n``HttpDecoder decoder;``\r\n\r\nThen instantiate a new ``httpConsumer`` : this object will monitor your data streaming decoding and will contain decoded frame(s)\r\n\r\n``httpConsumer *consumer = new httpConsumer;``\r\n\r\nFor both of them you'll need these import : <br/>\r\n``#include \"protocol/http/HttpDecoder.h\"``<br/>\r\n``#include \"protocol/inter/http/Httpconsumer.h\"``<br/>\r\n\r\n\r\nYour data streaming will be put to a ``QByteArray *`` to be sent to http decoder :<br/>\r\n``QByteArray *httpFrame = new QByteArray(\"POST /rest/help/todo HTTP/1.1\\r\\nheaders1:  value1\\r\\nheaders2:  value2\\r\\nContent-Length:  15\\r\\n\\r\\nbodyTobeWritten\\r\\n\")``\r\n\r\nEventually decode with : \r\n\r\n``decoder.httpDecode(consumer,httpFrame);``\r\n\r\nResult of decoding will be in your pointer to consumer object you have just created\r\n\r\nYou can access to decoded frame with ``consumer->getHttpFrameList()`` which is a ``vector<httpConsumer*>`` you can iterate\r\n\r\nThen you can remove frame you have treated and re-loop to decode again with the same object if you want to\r\n\r\nComplete exemple in ./http-decoder-test/launcher.cpp\r\n\r\n<hr/>\r\n\r\n<b>How to build</b>\r\n\r\nThis is composed of 2 projects:\r\n* http decoder library project\r\n* http decoder test \r\n\r\nYou can open .pro file of both with qtcreator and build project\r\n\r\n<hr/>\r\n\r\n<b>Exemple</b>\r\n\r\n``HttpDecoder decoder;``\r\n\r\n``httpConsumer *consumer = new httpConsumer;``\r\n\r\n``QByteArray *httpFrame = \"POST /rest/help/todo HTTP/1.1\\r\\nheaders1:  value1\\r\\nheaders2:  value2\\r\\nContent-Length:  15\\r\\n\\r\\nbodyTobeWritten\\r\\nHTTP/1.1 200 OK\\r\\n\\r\\n\";``\r\n\r\n``httpFrame = new QByteArray(data1);``\r\n\r\n``decoder.httpDecode(consumer,httpFrame);``\r\n\r\nFrom consumer object ``consumer->getHttpFrameList()`` you can extract those fields : \r\n\r\n  method name      |  data         | type                              | exemple\r\n| ---------------  | ------------- | --------------------------------  | ----------------------\r\n| getUri()         | uri           | std::string                       | /api/rest              |\r\n| getMethod()      | method        | std::string                       | POST                   |\r\n| getBody()        | body          | std::string                       | {\"data\":\"OK\"}          |\r\n| getQueryString() | querystring   | std::string                       | Not Found              |\r\n| getStatusCode()  | status code   | int                               | 404                    |\r\n| getHeaders()     | headers       | std::map<std::string,std::string> |(\"Content-Length\",\"15\") |\r\n\r\n<hr/>\r\n\r\n* Project is Qt4 compliant\r\n* You can build it with qmake\r\n* Development on QtCreator\r\n* Specification from https://www.ietf.org/rfc/rfc2616.txt\r\n\r\nTODO : plan to remove QtCore dependencies for a more portable solution\r\n","google":"UA-62569105-1","note":"Don't delete this file! It's used internally to help with page regeneration."}